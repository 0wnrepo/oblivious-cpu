#define MEMORY_SIZE 256

word pc;
word ac;

bit alu_minus;
bit alu_carry;
bit alu_zero;

word[ARRAY_ROWS] memory;

(word, bit) add_with_carry(word a, word b, bit carry) {
	word res;
	bit c = carry;

	for (i : 0..8) {
		res[i], c = fulladd(a[i], b[i], c);
	}

	return res[i], c;
}

word memory_read(word addr, int size) {
	word b1;

	for (row : 0..MEMORY_SIZE) {
		b1 = b1 | (r[row] & memory[row][size - 1:0]);
	}

	return b1;
}

word memory_access(word addr, word target, bit write) {
	bit[ARRAY_ROWS] r;
	word b1;

	for (row : 0..MEMORY_SIZE) {
		r[row] = (addr == row);
		memory[row] = (r[row] & write) ? reg : memory[row];
		b1 = b1 | (r[row] & memory[row][7:0]);
	}

	return b1;
}

init() {
	pc = 0;
	ac = 0;
	for (row : 0..MEMORY_SIZE) {
		memory[row] = 0;
	}

	alu_carry = 0;
	alu_zero = 0;
	alu_minus = 0;
}

tick() {
	word cmd = memory_read(pc, 13);
	word cmd_param = cmd.bits(7, 0);
	bit cmd_a = cmd[12]; // Address?

	word load_arg = memory_read(b1, 8);

	// Decode
	bit cmd_store = cmd[11:8] == 15; // Store ac to memory
	bit cmd_load = cmd[11:8] == 14; // Load memory to ac
	bit cmd_ror = cmd[11:8] == 13; // Rotate right through alu_carry
	bit cmd_rol = cmd[11:8] == 12; // Rotate left through alu_carry
	bit cmd_add = cmd[11:8] == 11; // Add ac to immediate or indirect
	bit cmd_clc = cmd[11:8] == 10; // Clear carry
	bit cmd_sec = cmd[11:8] == 9; // Set carry
	bit cmd_xor = cmd[11:8] == 8; // XOR ac with immediate
	bit cmd_and = cmd[11:8] == 7; // AND ac with immediate
	bit cmd_or = cmd[11:8] == 6; // OR ac with immediate
	bit cmd_beq = cmd[11:8] == 5; // Branch if alu_zero
	bit cmd_jmp = cmd[11:8] == 4; // Branch unconditionally
	bit cmd_la = cmd[11:8] == 3; // Load indirect
	bit cmd_bmi = cmd[11:8] == 2; // Branch if alu_minus
	bit cmd_cmp = cmd[11:8] == 1; // Compare ac with immediate or indirect

	// CMP
	word b_cmp = !( cmd_a ? load_arg : cmd_param ) + 1 + ac

	// ROL
	bit carry_rol = ac[0];
	b_rol[6:0] = ac[7:1]
	b_rol[7] = alu_carry;

	// ROR
	bit carry_ror = ac[7];
	b_ror[7:1] = ac[6:0];
	b_ror[0] = alu_carry;

	// ADD
	b_add_1, carry_1 = add_with_carry(ac, cmd_param, alu_carry);
	b_add_2, carry_2 = add_with_carry(ac, load_arg, alu_carry);		
	word b_add = cmd_a ? b_add_2 : b_add_1;
	bit carry_add = cmd_a ? carry_2 : carry_1;

	word load_val = memory_access(b1, ac, cmd_store);

	bit ac_unchanged = cmd_beq | cmd_bmi | cmd_cmp | cmd_jmp | cmd_store | cmd_clc | cmd_sec;

	ac = 
		cmd_load & b1 |
		cmd_ror & b_ror |
		cmd_rol & b_rol |
		cmd_add & b_add |
		cmd_and & (ac & cmd_param) |
		cmd_xor & (ac ^ cmd_param) |
		cmd_or & (ac | cmd_param) |
		cmd_la & load_val |
		ac_unchanged & ac;

	alu_zero = (cmd_cmp ? b_cmp == 0 : ac == 0) | (alu_zero & (cmd_bmi | cmd_beq))

	alu_minus = cmd_cmp ? b_cmp[7] : alu_minus

	alu_carry = 
		cmd_add ? carry_add :
		cmd_rol ? carry_rol :
		cmd_ror ? carry_ror :
		cmd_clc ? 0 :
		cmd_sec ? 1 :
		alu_carry;

	word pc_linear = pc + 1

	pc = 
		cmd_beq ? (alu_zero ? cmd_param : pc_linear) :
		cmd_bmi ? (alu_minus ? cmd_param : pc_linear) :
		cmd_jmp ? cmd_param :
			pc_linear;
}




